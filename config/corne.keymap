/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        tildesc: tilde_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TILDE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gravetab: grave_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_TAB";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp GRAVE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lhmm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 13 14 15 16 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
        };

        rhmm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 19 20 21 22 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "ENHANCED_LEFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 37 38 39 40 41>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "ENHANCED_RIGHT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 40 39 41 6 8 7 10 9 18 19 21 20 22 34 33 32 31 30>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_to_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q         &kp W            &kp E              &kp R            &kp T          &kp Y        &kp U                &kp I               &kp O             &kp P                         &none
&none  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LEFT_GUI F  &kp G          &kp H        &hmr RIGHT_GUI J     &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_CONTROL SEMICOLON  &none
&none  &kp Z         &kp X            &kp C              &kp V            &kp B          &kp N        &kp M                &kp COMMA           &kp DOT           &kp FSLH                      &none
                                      &caps_word         &kp ENTER        &lt 2 SPACE    &lt 1 ENTER  &mt LSHFT BACKSPACE  &tildesc
            >;
        };

        NAV {
            bindings = <
&none  &kp TAB        &kp LC(LEFT_ARROW)        &kp LC(RIGHT)  &kp C_BRIGHTNESS_INC    &kp C_VOLUME_UP      &kp LG(LEFT)  &kp LC(P)   &kp LC(N)     &kp LG(RIGHT)  &kp DELETE     &none
&none  &kp GRAVE      &trans                    &trans         &kp C_BRIGHTNESS_DEC    &kp C_VOLUME_DOWN    &kp LEFT      &kp DOWN    &kp UP_ARROW  &kp RIGHT      &kp BACKSPACE  &none
&none  &kp LC(LG(Q))  &kp LS(LC(LG(NUMBER_4)))  &kp K_PREV     &kp K_PLAY_PAUSE        &kp K_NEXT           &kp LA(LEFT)  &kp LC(D)   &kp LC(U)     &kp LA(RIGHT)  &kp ENTER      &none
                                                &kp ESCAPE     &mt LEFT_ALT LG(SPACE)  &mo 2                &none         &sys_reset  &bootloader
            >;
        };

        SYM {
            bindings = <
&none  &mt EXCL NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR NUMBER_4  &mt PERCENT N5    &mt CARET NUMBER_6  &mt AMPS N7           &mt ASTRK N8           &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &none
&none  &kp TILDE          &kp UNDER             &kp LESS_THAN      &kp GREATER_THAN     &kp EQUAL         &kp SQT             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON            &kp SLASH                 &none
&none  &kp BACKSLASH      &kp PIPE              &kp COMMA          &kp DOT              &kp PLUS          &kp MINUS           &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LEFT_BRACE           &kp RIGHT_BRACE           &none
                                                &trans             &trans               &none             &mo 1               &kp LEFT_SHIFT        &kp DOUBLE_QUOTES
            >;
        };

        NUMPAD_BT {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &kp KP_DIVIDE    &none
&none  &trans        &bt BT_PRV    &bt BT_NXT      &kp KP_COMMA  &kp KP_DOT      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0  &kp KP_ENTER     &none
&none  &trans        &trans        &trans          &trans        &kp KP_EQUAL    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS      &kp KP_SUBTRACT  &none
                                   &bt BT_CLR_ALL  &bt BT_CLR    &none           &none            &trans           &trans
            >;
        };
    };
};
