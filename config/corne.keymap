/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
      lhmm: left_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <240>;
        quick-tap-ms = <0>;
        flavor = "tap-unless-interrupted";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      };

      rhmm: right_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <240>;
        quick-tap-ms = <0>;
        flavor = "tap-unless-interrupted";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
              &kp TAB                 &kp Q                 &kp W              &kp E            &kp R               &kp T               &kp Y            &kp U             &kp I                 &kp O              &kp P                    &kp BSPC
               &gresc        &lhmm  LCTRL A          &lhmm LALT S     &lhmm LSHIFT D     &lhmm LGUI F               &kp G               &kp H            &rhmm RGUI J      &rhmm RSHIFT K        &rhmm LALT L       &rhmm RCTRL SEMI         &kp RET
      &mt LSHIFT LPAR                 &kp Z                 &kp X              &kp C            &kp V               &kp B               &kp N            &kp M             &kp COMMA             &kp DOT            &kp FSLH                 &mt RSHFT RPAR
                         &mt LEFT_GUI MINUS       &mt LSHFT SPACE              &sl 1                                                    &sl 2            &mt LSHFT SPACE  &mt LEFT_ALT SQT
            >;
        };

        layer_Symbols {
            bindings = <
 &kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET  &kp AMPS  &kp KP_MULTIPLY   &kp LPAR   &kp RPAR  &kp EQUAL
    &trans    &trans  &trans   &kp SQT   &kp DQT  &kp TILDE          &kp TILDE  &kp LBRC         &kp RBRC  &kp MINUS  &kp UNDER   &kp PLUS
    &trans    &trans  &trans    &kp LT    &kp GT     &trans             &trans  &kp LBKT         &kp RBKT   &kp PIPE   &kp BSLH     &trans
                                &trans    &trans     &trans             &trans    &trans           &trans
            >;
        };

        layer_Shortcuts {
            bindings = <
 &kp LG(LC(Q))  &kp N1  &kp N2        &kp N3         &kp N4        &kp N5            &kp N6              &kp N7      &kp N8      &kp N9  &kp N0  &kp DEL
        &trans  &trans  &trans     &kp LC(P)      &kp LC(N)  &kp K_VOL_UP          &kp LEFT            &kp DOWN      &kp UP   &kp RIGHT  &trans   &trans
        &trans  &trans  &trans  &kp LC(LEFT)  &kp LC(RIGHT)  &kp K_VOL_DN           &kp F12  &kp LG(LC(LS(N4)))  &kp K_PREV  &kp K_NEXT  &trans   &trans
                                      &trans     &caps_word      &kp K_PP            &trans              &trans      &reset
            >;
        };

        layer_NUMPAD {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans          &kp KP_MULTIPLY  &kp N7   &kp N8  &kp N9   &kp PLUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                &kp SLASH  &kp N4   &kp N5  &kp N6  &kp MINUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                   &trans  &kp N1   &kp N2  &kp N3  &kp COMMA  &trans
                         &trans  &trans  &trans                   &trans  &kp N0  &kp DOT
            >;
        };
    };
};
